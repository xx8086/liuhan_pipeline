#include "lhmatrix_float4.h"
#include <memory.h>
#include <assert.h>

LhMatrixFloat4::LhMatrixFloat4(){
}


LhMatrixFloat4::~LhMatrixFloat4(){
}

LhMatrixFloat4::LhMatrixFloat4(float a00, float a01, float a02, float a03,
    float a10, float a11, float a12, float a13,
    float a20, float a21, float a22, float a23,
    float a30, float a31, float a32, float a33){
    _m[0][0] = a00; _m[0][1] = a01; _m[0][2] = a02; _m[0][3] = a03;
    _m[1][0] = a10; _m[1][1] = a11; _m[1][2] = a12; _m[1][3] = a13;
    _m[2][0] = a20; _m[2][1] = a21; _m[2][2] = a22; _m[2][3] = a23;
    _m[3][0] = a30; _m[3][1] = a31; _m[3][2] = a32; _m[3][3] = a33;
}

void LhMatrixFloat4::set_zero(){
    memset(_m, 0, sizeof(_m));
}

LhMatrixFloat4 LhMatrixFloat4::transpose() const {
    LhMatrixFloat4 n;
    for (unsigned int i = 0; i < 4; i++) {
        for (unsigned int j = 0; j < 4; j++) {
            n._m[i][j] = _m[j][i];
        }
    }

    return n;
}

void LhMatrixFloat4::init_identity(){
    _m[0][0] = 1.0f; _m[0][1] = 0.0f; _m[0][2] = 0.0f; _m[0][3] = 0.0f;
    _m[1][0] = 0.0f; _m[1][1] = 1.0f; _m[1][2] = 0.0f; _m[1][3] = 0.0f;
    _m[2][0] = 0.0f; _m[2][1] = 0.0f; _m[2][2] = 1.0f; _m[2][3] = 0.0f;
    _m[3][0] = 0.0f; _m[3][1] = 0.0f; _m[3][2] = 0.0f; _m[3][3] = 1.0f;
}

LhMatrixFloat4 LhMatrixFloat4::operator*(const LhMatrixFloat4& right) const
{
    LhMatrixFloat4 ret;
    for (unsigned int i = 0; i < 4; i++)
    {
        for (unsigned int j = 0; j < 4; j++)
        {
            ret._m[i][j] =
                _m[i][0] * right._m[0][j] +
                _m[i][1] * right._m[1][j] +
                _m[i][2] * right._m[2][j] +
                _m[i][3] * right._m[3][j];
        }
    }
    return ret;
}

float LhMatrixFloat4::determinant() const {//ÐÐÁÐÊ½
    return _m[0][0] * _m[1][1] * _m[2][2] * _m[3][3] - _m[0][0] * _m[1][1] * _m[2][3] * _m[3][2] + _m[0][0] * _m[1][2] * _m[2][3] * _m[3][1] - _m[0][0] * _m[1][2] * _m[2][1] * _m[3][3]
        + _m[0][0] * _m[1][3] * _m[2][1] * _m[3][2] - _m[0][0] * _m[1][3] * _m[2][2] * _m[3][1] - _m[0][1] * _m[1][2] * _m[2][3] * _m[3][0] + _m[0][1] * _m[1][2] * _m[2][0] * _m[3][3]
        - _m[0][1] * _m[1][3] * _m[2][0] * _m[3][2] + _m[0][1] * _m[1][3] * _m[2][2] * _m[3][0] - _m[0][1] * _m[1][0] * _m[2][2] * _m[3][3] + _m[0][1] * _m[1][0] * _m[2][3] * _m[3][2]
        + _m[0][2] * _m[1][3] * _m[2][0] * _m[3][1] - _m[0][2] * _m[1][3] * _m[2][1] * _m[3][0] + _m[0][2] * _m[1][0] * _m[2][1] * _m[3][3] - _m[0][2] * _m[1][0] * _m[2][3] * _m[3][1]
        + _m[0][2] * _m[1][1] * _m[2][3] * _m[3][0] - _m[0][2] * _m[1][1] * _m[2][0] * _m[3][3] - _m[0][3] * _m[1][0] * _m[2][1] * _m[3][2] + _m[0][3] * _m[1][0] * _m[2][2] * _m[3][1]
        - _m[0][3] * _m[1][1] * _m[2][2] * _m[3][0] + _m[0][3] * _m[1][1] * _m[2][0] * _m[3][2] - _m[0][3] * _m[1][2] * _m[2][0] * _m[3][1] + _m[0][3] * _m[1][2] * _m[2][1] * _m[3][0];
}

LhMatrixFloat4& LhMatrixFloat4::inverse() {//Äæ¾ØÕó
    float det = determinant();
    if (det == 0.0f){
        assert(0);
        return *this;
    }

    float invdet = 1.0f / det;
    LhMatrixFloat4 res;
    res._m[0][0] = invdet * (_m[1][1] * (_m[2][2] * _m[3][3] - _m[2][3] * _m[3][2]) + _m[1][2] * (_m[2][3] * _m[3][1] - _m[2][1] * _m[3][3]) + _m[1][3] * (_m[2][1] * _m[3][2] - _m[2][2] * _m[3][1]));
    res._m[0][1] = -invdet * (_m[0][1] * (_m[2][2] * _m[3][3] - _m[2][3] * _m[3][2]) + _m[0][2] * (_m[2][3] * _m[3][1] - _m[2][1] * _m[3][3]) + _m[0][3] * (_m[2][1] * _m[3][2] - _m[2][2] * _m[3][1]));
    res._m[0][2] = invdet * (_m[0][1] * (_m[1][2] * _m[3][3] - _m[1][3] * _m[3][2]) + _m[0][2] * (_m[1][3] * _m[3][1] - _m[1][1] * _m[3][3]) + _m[0][3] * (_m[1][1] * _m[3][2] - _m[1][2] * _m[3][1]));
    res._m[0][3] = -invdet * (_m[0][1] * (_m[1][2] * _m[2][3] - _m[1][3] * _m[2][2]) + _m[0][2] * (_m[1][3] * _m[2][1] - _m[1][1] * _m[2][3]) + _m[0][3] * (_m[1][1] * _m[2][2] - _m[1][2] * _m[2][1]));
    res._m[1][0] = -invdet * (_m[1][0] * (_m[2][2] * _m[3][3] - _m[2][3] * _m[3][2]) + _m[1][2] * (_m[2][3] * _m[3][0] - _m[2][0] * _m[3][3]) + _m[1][3] * (_m[2][0] * _m[3][2] - _m[2][2] * _m[3][0]));
    res._m[1][1] = invdet * (_m[0][0] * (_m[2][2] * _m[3][3] - _m[2][3] * _m[3][2]) + _m[0][2] * (_m[2][3] * _m[3][0] - _m[2][0] * _m[3][3]) + _m[0][3] * (_m[2][0] * _m[3][2] - _m[2][2] * _m[3][0]));
    res._m[1][2] = -invdet * (_m[0][0] * (_m[1][2] * _m[3][3] - _m[1][3] * _m[3][2]) + _m[0][2] * (_m[1][3] * _m[3][0] - _m[1][0] * _m[3][3]) + _m[0][3] * (_m[1][0] * _m[3][2] - _m[1][2] * _m[3][0]));
    res._m[1][3] = invdet * (_m[0][0] * (_m[1][2] * _m[2][3] - _m[1][3] * _m[2][2]) + _m[0][2] * (_m[1][3] * _m[2][0] - _m[1][0] * _m[2][3]) + _m[0][3] * (_m[1][0] * _m[2][2] - _m[1][2] * _m[2][0]));
    res._m[2][0] = invdet * (_m[1][0] * (_m[2][1] * _m[3][3] - _m[2][3] * _m[3][1]) + _m[1][1] * (_m[2][3] * _m[3][0] - _m[2][0] * _m[3][3]) + _m[1][3] * (_m[2][0] * _m[3][1] - _m[2][1] * _m[3][0]));
    res._m[2][1] = -invdet * (_m[0][0] * (_m[2][1] * _m[3][3] - _m[2][3] * _m[3][1]) + _m[0][1] * (_m[2][3] * _m[3][0] - _m[2][0] * _m[3][3]) + _m[0][3] * (_m[2][0] * _m[3][1] - _m[2][1] * _m[3][0]));
    res._m[2][2] = invdet * (_m[0][0] * (_m[1][1] * _m[3][3] - _m[1][3] * _m[3][1]) + _m[0][1] * (_m[1][3] * _m[3][0] - _m[1][0] * _m[3][3]) + _m[0][3] * (_m[1][0] * _m[3][1] - _m[1][1] * _m[3][0]));
    res._m[2][3] = -invdet * (_m[0][0] * (_m[1][1] * _m[2][3] - _m[1][3] * _m[2][1]) + _m[0][1] * (_m[1][3] * _m[2][0] - _m[1][0] * _m[2][3]) + _m[0][3] * (_m[1][0] * _m[2][1] - _m[1][1] * _m[2][0]));
    res._m[3][0] = -invdet * (_m[1][0] * (_m[2][1] * _m[3][2] - _m[2][2] * _m[3][1]) + _m[1][1] * (_m[2][2] * _m[3][0] - _m[2][0] * _m[3][2]) + _m[1][2] * (_m[2][0] * _m[3][1] - _m[2][1] * _m[3][0]));
    res._m[3][1] = invdet * (_m[0][0] * (_m[2][1] * _m[3][2] - _m[2][2] * _m[3][1]) + _m[0][1] * (_m[2][2] * _m[3][0] - _m[2][0] * _m[3][2]) + _m[0][2] * (_m[2][0] * _m[3][1] - _m[2][1] * _m[3][0]));
    res._m[3][2] = -invdet * (_m[0][0] * (_m[1][1] * _m[3][2] - _m[1][2] * _m[3][1]) + _m[0][1] * (_m[1][2] * _m[3][0] - _m[1][0] * _m[3][2]) + _m[0][2] * (_m[1][0] * _m[3][1] - _m[1][1] * _m[3][0]));
    res._m[3][3] = invdet * (_m[0][0] * (_m[1][1] * _m[2][2] - _m[1][2] * _m[2][1]) + _m[0][1] * (_m[1][2] * _m[2][0] - _m[1][0] * _m[2][2]) + _m[0][2] * (_m[1][0] * _m[2][1] - _m[1][1] * _m[2][0]));
    *this = res;
    return *this;
}